---
description: 
globs: 
alwaysApply: false
---
# AI Style Guide Generator - Project Scratchpad

## 📋 Project Overview
Web app that generates brand style guides from website URLs using AI to extract and analyze brand elements. Built with Next.js, TypeScript, Tailwind CSS, OpenAI API, and Stripe.

## 🎯 Core User Journey
1. **Landing Page** → Enter website URL or create manually
2. **Website Analysis** → AI extracts brand info and autofills form
3. **Brand Details** → User reviews/edits brand information  
4. **Preview** → Shows partial style guide with paywall
5. **Payment** → Stripe checkout for full access
6. **Email Capture** → Collects email for thank you & abandoned cart recovery
7. **Full Access** → Complete style guide with download options

---

## 🚧 Active Tasks

### High Priority (P0)
- 🔄 **Payment Flow Polish** - Add real-time generation status tracking, better success page UX, proper error handling
- 🔄 **Product Quality Assurance** - Ensure all 25 style rules display correctly, validate download functionality  
- 🔄 **Mobile Conversion Optimization** - Shorten fade-out effect, optimize mobile paywall dialog

### Medium Priority (P1)
- 🔄 **Error Handling Enhancement** - Better error messages, retry options, fallback handling

### 🔄 **NEXT: Error Handling Enhancement Plan**

**Goal**: Improve user experience when API calls fail with better error messages, retry options, and graceful fallbacks.

**Implementation Plan:**

**Phase 1: Enhanced Error Messages** 🔄
1. 🔄 **Identify error sources**: Map all API failure points (website extraction, OpenAI, network issues)
2. 🔄 **Create user-friendly messages**: Replace technical errors with helpful guidance
3. 🔄 **Add error message component**: Reusable error UI with clear messaging

**Phase 2: Retry Mechanism** 🔄
1. 🔄 **Add exponential backoff**: Smart retry logic (immediate, 2s, 5s delays, max 3 attempts)
2. 🔄 **Visual retry feedback**: "Retrying..." state with progress indicator
3. 🔄 **User-controlled retry**: Manual "Try Again" buttons

**Phase 3: Graceful Fallbacks** 🔄
1. 🔄 **Website extraction fallback**: Guide to manual input if auto-extraction fails
2. 🔄 **Model fallback**: GPT-4 → GPT-3.5-turbo automatic switching
3. 🔄 **Partial content handling**: Show what worked, complete remaining parts

**Phase 4: Error Analytics** 🔄
1. 🔄 **Track error patterns**: Log errors to identify common failure points
2. 🔄 **User-friendly error codes**: Reference numbers for support
3. 🔄 **Success rate monitoring**: Track API performance

**Files to Update:**
- `lib/api-utils.ts` - Retry logic and error mapping
- `components/ui/error-message.tsx` - Reusable error component
- `app/brand-details/page.tsx` - Extraction retry UX
- `app/preview/page.tsx` - Generation retry UX
- API routes - Better error responses

---

## ✅ Major Completed Tasks

### Recent Completed (January 2025)

#### ✅ **P1 CRITICAL: Markdown Rendering Overhaul** 
**Problem**: Premium users experiencing poor formatting - malformed emojis, broken special characters, inconsistent line breaks
**Solution**: Replaced `marked` + `dangerouslySetInnerHTML` with `react-markdown` + `remark-gfm` + `remark-breaks`
**Impact**: Fixed all formatting issues, safe rendering, consistent display across core/complete guides
- ✅ Installed `react-markdown@10.1.0`, `remark-breaks@4.0.0`
- ✅ Created `MarkdownRenderer` component with custom styling
- ✅ Updated all rendering instances (StyleGuideAccordion, preview, full-access pages)
- ✅ Fixed line break issues with remark-breaks plugin for ✅/❌ examples
- ✅ Removed `marked@15.0.11` dependency completely

#### ✅ **Brand Name Flow Simplification**
**Problem**: Complex, buggy data flow with duplicate extraction logic
**Solution**: Complete architecture overhaul with 60% code reduction
- ✅ Unified data structure: `{ brandName: "", description: "", tone: "friendly" }`
- ✅ Simplified API routes, removed duplicate functions
- ✅ Clean flow: URL params → form pre-fill → user edits → localStorage → generate

#### ✅ **Email Automation System**
- ✅ Resend integration with professional templates
- ✅ Abandoned cart recovery with 20% discount codes
- ✅ Stripe webhook handling for success/expiration events

#### ✅ **UI/UX Polish**
- ✅ **Preview loading UX** - Removed loading interstitial, show processing state on button
- ✅ **Mobile optimizations** - Fade-out timing, responsive improvements
- ✅ Professional comparison table on landing page
- ✅ Vercel Analytics tracking for conversion funnel

### Previous Improvements (2024)
- ✅ **Core systems stabilization** - Fixed data flow, OpenAI integration, template validation
- ✅ **User experience polish** - Pricing transparency, social proof, UI cleanup
- ✅ **Production-ready codebase** - Type safety, security hardening, performance optimizations

---

## 📚 Key Lessons Learned

### Technical Architecture
- **Markdown rendering complexity** - `react-markdown` provides safer, more consistent rendering than `marked` + dangerouslySetInnerHTML
- **Plugin ecosystem** - `remark-breaks` solved line break issues more robustly than custom formatting functions
- **Template consistency is critical** - Always use shared components for uniform styling across all generated content
- **Type safety prevents runtime errors** - Add type guards before accessing AI responses

### User Experience  
- **Mobile-first + loading states** - Most users access on mobile, always provide feedback instead of blank screens
- **Payment UX strategy** - Static previews save OpenAI costs, full generation only post-payment
- **Error handling matters** - Generic errors cause user dropoff, need specific helpful messages

### AI Integration
- **OpenAI responses need validation** - Always check format, handle edge cases, use chunked generation
- **Cost optimization matters** - GPT-3.5 for extraction, GPT-4 for generation, 10k character limits
- **Model fallbacks** - Having backup models prevents complete failures

### Development Process
- **Incremental implementation** - Break complex changes into phases for testing and validation
- **Visual proof testing** - Side-by-side comparisons on test pages catch issues early
- **Data flow validation** - Test through all system layers before marking complete

---

## 🗺️ Future Roadmap

### Short Term (Next 2 weeks)
- **Complete payment flow polish** - Status tracking, better UI, proper redirects
- **Content validation testing** - Ensure all generated content displays correctly
- **Performance monitoring setup** - Add logging for production debugging

### Medium Term (1-2 months)  
- **Editable Style Guides with Plate.js** - Allow users to edit generated content before download
- **Template variety** - Add different style guide formats and structures
- **Export enhancements** - Better PDF styling, additional formats (JSON, Figma)

### Long Term (3+ months)
- **Team collaboration features** - Share guides within organizations
- **API for developers** - Allow programmatic access to style guide generation
- **White-label solution** - Allow agencies to rebrand and resell the tool

---

## 🔧 Technical Notes

### Current Architecture
- **Frontend**: Next.js 14, TypeScript, Tailwind CSS, Lucide Icons
- **Backend**: Next.js API routes, OpenAI API, Stripe integration
- **Markdown**: react-markdown + remark-gfm + remark-breaks
- **Storage**: localStorage for client state, sessionStorage for temporary data
- **Styling**: Tailwind Typography, shared MarkdownRenderer, dark mode support

### Key Files & Directories
- `app/page.tsx` - Landing page with URL input
- `app/brand-details/page.tsx` - Brand information form  
- `app/preview/page.tsx` - Style guide preview with paywall
- `app/full-access/page.tsx` - Complete style guide display
- `components/MarkdownRenderer.tsx` - Unified markdown rendering
- `lib/template-processor.ts` - Template loading and processing
- API routes: extract-website, generate-styleguide, preview

### Environment Variables
```
RESEND_API_KEY=re_your_api_key_here
STRIPE_MODE=test (switches between test/live)
NEXT_PUBLIC_APP_URL=http://localhost:3002 (for local testing)
```

---

*Last updated: January 2025*
*Status: Active Development*