---
description: 
globs: 
alwaysApply: false
---
# AI Style Guide Generator - Project Scratchpad

## 📋 Project Overview
Web app that generates brand style guides from website URLs using AI to extract and analyze brand elements. Built with Next.js, TypeScript, Tailwind CSS, OpenAI API, and Stripe.

## 🎯 Core User Journey
1. **Landing Page** → Enter website URL or create manually
2. **Website Analysis** → AI extracts brand info and autofills form
3. **Brand Details** → User reviews/edits brand information  
4. **Preview** → Shows partial style guide with paywall
5. **Payment** → Stripe checkout for full access
6. **Email Capture** → Collects email for thank you & abandoned cart recovery
7. **Full Access** → Complete style guide with download options

## ✅ Recently Completed

### Latest (Jan 2025)
- ✅ **Enhanced Brand Input** - Homepage accepts URLs + text descriptions, AI expansion
- ✅ **Voice Traits Integration** - Selected traits now influence AI-generated style rules
- ✅ **Email Automation** - Thank you emails, abandoned cart recovery with discount codes
- ✅ **Comparison Table** - Professional "Why choose AIStyleGuide" landing page section

### Foundation (2024)
- ✅ **Core Journey** - Complete user flow from landing → analysis → preview → payment → delivery
- ✅ **Production Ready** - Type safety, security, performance, mobile responsiveness

## 🚧 Active Tasks



### **🎯 NEW: Copywriter-First Rebuild (Separate Branch)**
*Transform from "quick generator" to "professional copywriter tool"*

### Critical Priority (P0) 
- 🔄 **Copy Audit Engine** - Build violation detection (passive voice, sentence length, jargon, spelling inconsistencies)
- 🔄 **Error handling enhancement** - Better error messages, retry options, fallback handling for existing flow
- 🔄 **Product Quality Assurance** - Ensure all 25 style rules display correctly, validate download functionality
- 🔄 **Payment Flow Polish** - Add real-time generation status tracking, better success page UX, proper error handling

### High Priority (P1)
- 🔄 **Dynamic Questionnaire UI** - Pre-populated form based on audit findings, smart defaults with user override
- 🔄 **Preview Mode with Regeneration** - Side panel preview, section-by-section regeneration, violation→rule connections
- 🔄 **Watermarked PDF Samples** - Free 4-page preview with watermark to prove value before purchase

### Medium Priority (P2)
- 🔄 **Mobile Conversion Optimization** - Shorten fade-out effect, optimize mobile paywall dialog  
- 🔄 **Preview loading UX** - Remove loading interstitial, show processing state on button instead
- 🔄 **Composable Prompt System** - Modular prompts for section regeneration without full rebuild

### Low Priority (P3)
- 🔄 **Email Features** - Style guide delivery via email, welcome/onboarding sequence
- 🔄 **Automated testing** - Add tests for API routes and template processing
- 🔄 **Analytics integration** - Track user behavior and conversion metrics
- 🔄 **Performance monitoring** - Add logging and monitoring for production issues

## 📝 Next Big Tasks



**2. Custom Voice Traits**
- Allow users to add their own voice traits beyond predefined list
- Custom traits won't have descriptions (user defines their own meaning)
- Mix of predefined traits (with descriptions) + custom traits (user-defined)
- Still require exactly 3 traits total
- Custom traits get passed to AI with user context

**Implementation Plan - Custom Voice Traits:**

*Files to Update:*
- `components/VoiceTraitSelector.tsx` - Add custom trait input functionality
- `lib/traits.ts` - Update trait handling to support custom traits
- `app/brand-details/page.tsx` - Update selectedTraits state management
- `lib/openai.ts` - Update prompts to handle custom traits without descriptions
- `lib/template-processor.ts` - Update trait processing for mixed types

*Technical Steps:*
1. **Trait Data Structure** - Update trait object structure
   ```typescript
   interface Trait {
     id: string
     name: string
     description?: string // Optional for custom traits
     isCustom: boolean
   }
   ```
2. **UI Components** - Update VoiceTraitSelector
   - Show predefined traits with descriptions (current behavior)
   - Add "Add Custom Trait" button/input field
   - Custom traits display without description cards
   - **Deselection support** - Allow users to deselect traits on desktop and mobile (same click/tap approach as current traits)
   - Visual distinction between predefined vs custom
   - Validation: no duplicate names, reasonable character limits
3. **State Management** - Update selectedTraits handling
   - Support mix of predefined and custom trait objects
   - **Handle deselection** - Remove traits from selectedTraits array when clicked again
   - Maintain 3-trait limit across both types
   - Save custom traits to localStorage for persistence
4. **AI Integration** - Update OpenAI prompts
   - Predefined traits: use name + description in prompts
   - Custom traits: use name only with note "user-defined trait"
   - Ensure AI understands custom traits are brand-specific

*Edge Cases to Handle:*
- Custom trait names that match predefined trait names
- Very long custom trait names (limit to 20 chars)
- Special characters in custom trait names (sanitize input)
- User removes custom trait then adds different one
- localStorage persistence across browser sessions
- Custom traits selected but then user switches to different browser

*UI/UX Considerations:*
- Clear visual difference between predefined and custom traits
- Help text explaining custom traits don't have AI-generated descriptions
- Smooth add/remove animations for custom traits
- Mobile-friendly custom trait input experience

### Email Setup Required
- **Need**: Resend API key from dashboard
- **Need**: Domain verification (DNS records for aistyleguide.com)
- **Current**: Using placeholder API key `re_your_api_key_here`

### Testing Needed
- **Abandoned Cart Flow**: Test 2-hour session expiration
- **Email Templates**: Verify HTML rendering across email clients
- **Discount Codes**: Test recovery URL functionality

## 📚 Key Lessons Learned

### Technical Architecture
- **Template consistency is critical** - Always use shared MarkdownComponents for uniform styling across all generated content
- **Type safety prevents runtime errors** - Add type guards before accessing potentially undefined values, especially with AI responses

### User Experience  
- **Mobile-first + loading states** - Most users access on mobile, always provide feedback instead of blank screens
- **Payment UX strategy** - Static previews save OpenAI costs, full generation only post-payment with clear pricing/flow

### AI Integration
- **OpenAI responses need validation** - Always check format, handle edge cases, use chunked generation for reliability
- **Cost optimization matters** - GPT-3.5 for extraction, GPT-4 for generation, 10k character limits prevent token overruns

### Development Process
- **Data flow validation + error handling** - Test through all system layers, detailed logs for debugging, graceful API failure degradation
- **Parallel tool usage** - Use multiple tools simultaneously for efficiency during development

### Email Integration
- **Professional delivery best practices** - HTML + text versions, inline CSS, clear CTAs, respect consent, track sent emails to prevent spam
- **Stripe abandoned cart setup** - Requires promotional consent, 30-day recovery URL expiry, discount codes increase conversion rates

### Node.js ESM Module Caching
- **ESM cache cannot be cleared** - Unlike CommonJS, no invalidation API exists, use dynamic imports + query parameters for dev hot reloading
- **Memory leak warning** - Cache busting creates permanent entries, only use in development mode

### Email Template Mystery (Unresolved)  
- **Problem**: Getting old email template despite code changes, confirmed NOT Stripe auto-emails (disabled in dashboard)
- **Applied fixes**: ESM cache busting, server restarts, cleared .next cache - still persists, needs webhook debugging

### Development Workflow
- **Stripe testing setup** - Test mode first with CLI webhooks, clean test/live config separation, real emails in test mode

## 🗺️ Future Roadmap

### **🆕 PRIORITY: Freemium Pricing Strategy (Option C)**
*Move auth gate after preview, implement tiered value*

**Implementation:**
- **Basic Style Guide (FREE)**: 10 core rules + voice traits, view + download
- **Full Style Guide ($99)**: 25+ rules + examples + formats  
- **Complete Guide ($149)**: 99+ rules + custom branding + team features

**Benefits:**
- Users see real value before paying
- Lower barrier to entry → more trials
- Higher conversion → proven value
- Reduces purchase anxiety

**Technical Changes Needed:**
- Update template processor to handle free tier limits
- Modify auth flow to gate features, not preview
- Add tier-based content generation
- Update payment flow and pricing modals

### **🆕 FUTURE: Freemium + Auth Strategy (Turboscribe Model)**
*Add authentication when ready to scale with usage limits*

**Freemium Structure:**
- **Free Tier**: 3 basic guides/month (10 rules) → Auth required to track usage
- **Pro Tier**: Unlimited full guides (25+ rules) → $99
- **Complete Tier**: Everything + team features → $149

**Implementation Phases:**
1. **Phase 1**: No auth, focus on product-market fit and core experience
2. **Phase 2**: Add freemium + auth when conversion proven

**Auth Benefits with Free Tier:**
- Track usage limits ("2/3 free guides used this month")
- Prevent abuse of free tier
- User dashboard ("Your previous guides")
- Email nurturing for upgrades
- Personalization and saved guides

**When to Add Auth:**
- ✅ Proven conversion on paid tiers
- ✅ Users asking to "save guides"
- ✅ Clear usage patterns established
- ✅ Email marketing campaigns ready

**Technical Requirements for Phase 2:**
- User authentication system
- Usage tracking and limits
- User dashboard for guide history
- Email automation for upgrade campaigns
- Tier-based feature gating

### Short Term (Next 3 weeks) - Copywriter Rebuild
- **Week 1: Copy Audit Foundation** - Violation detection engine, audit results UI
- **Week 2: Dynamic Flow** - Pre-populated questionnaire, preview with regeneration
- **Week 3: Polish & Testing** - Watermarked samples, composable prompts, user testing

### Medium Term (1-2 months)  
- **Advanced customization options** - Allow users to modify generated style guides
- **Template variety** - Add different style guide formats and structures
- **Export enhancements** - Better PDF styling, additional formats (JSON, Figma)
- **User dashboard** - Allow users to manage multiple purchased guides

### Long Term (3+ months)
- **Team collaboration features** - Share guides within organizations
- **API for developers** - Allow programmatic access to style guide generation
- **White-label solution** - Allow agencies to rebrand and resell the tool
- **Advanced AI features** - Visual brand analysis, competitive analysis integration

## 🔧 Technical Notes

### Current Architecture
- **Frontend**: Next.js 14, TypeScript, Tailwind CSS, Lucide Icons
- **terminal**: Always use pnpm instead of NPM for packagae install
- **Backend**: Next.js API routes, OpenAI API, Stripe integration
- **Storage**: localStorage for client state, sessionStorage for temporary data
- **Templates**: Markdown-based with variable replacement system
- **Styling**: Tailwind Typography, shared MarkdownComponents, dark mode support

### Key Files & Directories
- `app/page.tsx` - Landing page with URL input
- `app/brand-details/page.tsx` - Brand information form  
- `app/preview/page.tsx` - Style guide preview with paywall
- `app/full-access/page.tsx` - Complete style guide display
- `app/api/extract-website/` - Website analysis and brand extraction
- `app/api/generate-styleguide/` - Full style guide generation
- `app/api/preview/` - Preview content generation (static)
- `lib/template-processor.ts` - Template loading and processing
- `lib/markdown-components.tsx` - Shared markdown rendering components
- `templates/core_template.md` - Main style guide template

### Performance Optimizations
- **Parallel API calls** - Website analysis fetches multiple pages simultaneously
- **Model selection** - GPT-3.5-turbo for extraction, GPT-4 for generation
- **Content optimization** - 10k character limit for AI processing
- **Request timeouts** - 5-second timeout to prevent hanging requests
- **Static previews** - No AI costs for preview generation

### Security Measures  
- **No test endpoints in production** - All testing moved inline or removed
- **Input validation** - All form inputs validated on client and server
- **Rate limiting considerations** - Timeouts and error handling for external requests
- **Credit protection** - Static previews prevent unnecessary OpenAI usage

### Email Service (`lib/email-service.ts`)
- **Provider**: Resend (developer-friendly, good deliverability)
- **Templates**: Thank you emails, abandoned cart recovery
- **Features**: HTML + text versions, discount codes, professional styling
- **Spam Prevention**: Tracks sent emails to avoid duplicates

### Stripe Configuration
- **Email Capture**: `consent_collection.promotions = 'auto'`
- **Session Expiry**: 2 hours for abandoned cart recovery
- **Recovery URLs**: 30-day validity with discount codes
- **Webhooks**: `checkout.session.completed`, `checkout.session.expired`

### Environment Variables
```
RESEND_API_KEY=re_your_api_key_here
STRIPE_MODE=test (switches between test/live)
NEXT_PUBLIC_APP_URL=http://localhost:3000 (for local testing)
```

---

*Last updated: January 2025*
*Status: Active Development*