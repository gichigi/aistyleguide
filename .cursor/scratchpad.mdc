# AI Style Guide Generator - Project Scratchpad

## üìã Project Overview
Web app that generates brand style guides from website URLs using AI to extract and analyze brand elements. Built with Next.js, TypeScript, Tailwind CSS, OpenAI API, and Stripe.

## üéØ Core User Journey
1. **Landing Page** ‚Üí Enter website URL or create manually
2. **Website Analysis** ‚Üí AI extracts brand info and autofills form
3. **Brand Details** ‚Üí User reviews/edits brand information  
4. **Preview** ‚Üí Shows partial style guide with paywall
5. **Payment** ‚Üí Stripe checkout for full access
6. **Email Capture** ‚Üí Collects email for thank you & abandoned cart recovery
7. **Full Access** ‚Üí Complete style guide with download options

---

## üöß Active Tasks

### High Priority (P0)

### Medium Priority (P1)  

**üêõ Generation Retry Bug: Creates Apple Style Guide**
- **Problem**: When users get generation error and click retry, API generates Apple brand style guide instead of their brand
- **Evidence**: API logs show correct brand details but generates "Apple Style Rules" in response
- **Root Cause**: Unknown - needs investigation in retry flow and template processing
- **Impact**: Users get wrong content after paying for custom style guide
- **Files to investigate**: 
  - `app/payment/success/page.tsx` - retry function
  - `lib/template-processor.ts` - template rendering
  - `app/api/generate-styleguide/route.ts` - API processing

### Low Priority (P2)

**Investigate Complete Guide Generation Performance**
- **Observation**: Complete guides make 2 sequential OpenAI calls (voice traits + style rules)
- **Impact**: Takes 60-90 seconds total, contributing to timeout issues
- **Consider**: Parallel generation or caching to reduce time
- **Note**: May not be a bug - could be intentional design for complete guides

### Done/Completed

**‚úÖ Fixed Payment Success Page UI (Jan 2025)**
- Improved payment success page user experience and messaging
- **Key Lessons**: UI should inform users about wait times and what they're getting

**‚úÖ Fixed Style Guide Generation Timeout (Jan 2025)**  
- Increased timeout from 30 seconds to 5 minutes for style guide generation
- **Key Lessons**: Frontend timeouts must account for backend AI processing times (60-90s for complete guides)

---



## üìö Key Lessons Learned

### Technical Architecture
- **Markdown rendering complexity** - `react-markdown` provides safer, more consistent rendering than `marked` + dangerouslySetInnerHTML
- **Plugin ecosystem** - `remark-breaks` solved line break issues more robustly than custom formatting functions
- **Template consistency is critical** - Always use shared components for uniform styling across all generated content
- **Type safety prevents runtime errors** - Add type guards before accessing AI responses

### User Experience  
- **Mobile-first + loading states** - Most users access on mobile, always provide feedback instead of blank screens
- **Payment UX strategy** - Static previews save OpenAI costs, full generation only post-payment
- **Error handling matters** - Generic errors cause user dropoff, need specific helpful messages

### AI Integration
- **OpenAI responses need validation** - Always check format, handle edge cases, use chunked generation
- **Cost optimization matters** - GPT-3.5 for extraction, GPT-4 for generation, 10k character limits
- **Model fallbacks** - Having backup models prevents complete failures

### Development Process
- **Incremental implementation** - Break complex changes into phases for testing and validation
- **Visual proof testing** - Side-by-side comparisons on test pages catch issues early
- **Data flow validation** - Test through all system layers before marking complete
- **T-shirt sizing works** - SMALL (30 min), MEDIUM (1-2 hours), LARGE (half day+) for realistic estimates
- **Test CLI first, then UI** - Faster feedback loop for API issues, easier debugging
- **Clean as you go** - Move completed tasks immediately to keep scratchpad focused

### Error Handling & Validation
- **Frontend validation > backend validation** - Better UX to block submission early vs show errors after
- **Context-specific error types** - Payment success page only needs 9 of 16 total error types
- **Smart retry > page reload** - 3x faster, preserves state, better analytics
- **Pre-filled support emails** - Include error context and timestamps for better support experience
- **Consistent error UX** - Same patterns across all pages build user confidence

### Project Management
- **1-line summaries > detailed histories** - Keep completed work concise and scannable
- **Break large tasks into small testable pieces** - Each step should have clear completion criteria
- **Visual feedback guides behavior** - Colors, disabled states help users understand what to do next
- **Fix at source > downstream processing** - Remove duplicate content from templates rather than filtering it later

---

## üó∫Ô∏è Future Roadmap

### Short Term (Next 2 weeks)
- **Complete payment flow polish** - Status tracking, better UI, proper redirects
- **Content validation testing** - Ensure all generated content displays correctly
- **Performance monitoring setup** - Add logging for production debugging

### Medium Term (1-2 months)  
- **Editable Style Guides with Plate.js** - Allow users to edit generated content before download
- **Template variety** - Add different style guide formats and structures
- **Export enhancements** - Better PDF styling, additional formats (JSON, Figma)

### Long Term (3+ months)
- **Team collaboration features** - Share guides within organizations
- **API for developers** - Allow programmatic access to style guide generation
- **White-label solution** - Allow agencies to rebrand and resell the tool

### Future Ideas (6+ months)
- Advanced customization options (industry-specific templates, custom voice traits)
- Integration with design tools (Figma, Sketch)
- Multi-language support for international brands
- Team collaboration features (comments, suggestions, approval workflows)
- API for developers to integrate style guide generation into their tools
- Advanced analytics (content performance tracking, style guide usage metrics)
- Version control for style guides (track changes, rollback to previous versions)
- Bulk processing for multiple brands or sub-brands
- Custom branding for agencies (white-label solution)
- Advanced export options (InDesign, PowerPoint, Confluence)

---

## üîß Technical Notes

### Current Architecture
- **Frontend**: Next.js 14, TypeScript, Tailwind CSS, Lucide Icons
- **Backend**: Next.js API routes, OpenAI API, Stripe integration
- **Markdown**: react-markdown + remark-gfm + remark-breaks
- **Storage**: localStorage for client state, sessionStorage for temporary data
- **Styling**: Tailwind Typography, shared MarkdownRenderer, dark mode support

### Key Files & Directories
- `app/page.tsx` - Landing page with URL input
- `app/brand-details/page.tsx` - Brand information form  
- `app/preview/page.tsx` - Style guide preview with paywall
- `app/full-access/page.tsx` - Complete style guide display
- `components/MarkdownRenderer.tsx` - Unified markdown rendering
- `lib/template-processor.ts` - Template loading and processing
- API routes: extract-website, generate-styleguide, preview

### Environment Variables
```
RESEND_API_KEY=re_your_api_key_here
STRIPE_MODE=test (switches between test/live)
NEXT_PUBLIC_APP_URL=http://localhost:3002 (for local testing)
```

---

*Last updated: January 2025*
*Status: Active Development*

---

*Last updated: January 2025*
*Status: Active Development*