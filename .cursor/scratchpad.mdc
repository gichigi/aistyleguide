# AI Style Guide Generator - Project Scratchpad

## üìã Project Overview
Web app that generates brand style guides from website URLs using AI to extract and analyze brand elements. Built with Next.js, TypeScript, Tailwind CSS, OpenAI API, and Stripe.

## üéØ Core User Journey
1. **Landing Page** ‚Üí Enter website URL or create manually
2. **Website Analysis** ‚Üí AI extracts brand info and autofills form
3. **Brand Details** ‚Üí User reviews/edits brand information  
4. **Preview** ‚Üí Shows partial style guide with paywall
5. **Payment** ‚Üí Stripe checkout for full access
6. **Email Capture** ‚Üí Collects email for thank you & abandoned cart recovery
7. **Full Access** ‚Üí Complete style guide with download options

---

## üöß Active Tasks

### High Priority (P0)



### Medium Priority (P1)

**üìù Add Brand Description to Generated Style Guides** 
- **Goal**: Include the brand description in preview, core, and complete style guide templates
- **Current State**: Style guides only show brand voice traits, missing the foundational brand description
- **Impact**: Users lose context about what their brand actually does when viewing style guides
- **Implementation**: Add brand description section to templates and template processor
- **Benefit**: More complete and useful style guides that include brand context alongside voice guidelines



### Low Priority (P2)

**üè∑Ô∏è Fix Preview Page Title Display**
- **Issue**: Preview page still shows "Core Style Guide" instead of "Preview Style Guide" at the top
- **Root Cause**: Title likely coming from template content, not the React component we updated
- **Location**: May be in template markdown or different component than expected
- **Impact**: User confusion - contradicts transparency goals

**üìß Test & Debug Abandoned Cart Email System**
- **Issue**: Automated abandoned cart emails may not be working in production
- **Current State**: System deployed with hourly cron, admin client, and proper environment variables
- **Need To Check**: Vercel cron logs, email processing logs, database status after 2+ hours
- **Testing**: Create test email capture, wait 2+ hours, verify automated email delivery
- **Debug**: Check if cron job actually runs, if database queries work, if emails send

**Investigate Complete Guide Generation Performance**
- **Observation**: Complete guides make 2 sequential OpenAI calls (voice traits + style rules)
- **Impact**: Takes 60-90 seconds total, contributing to timeout issues
- **Consider**: Parallel generation or caching to reduce time
- **Note**: May not be a bug - could be intentional design for complete guides

### Done/Completed

**‚úÖ Latest Session Achievements (Aug 2025)**
- **Preview Page Overhaul**: Dynamic brand voice generation with 50%+ performance improvement (8s ‚Üí 3-4s)
- **Abandoned Cart Automation**: Fully automated hourly email scheduler with Vercel cron and admin Supabase client
- **Webhook System Fixed**: Stripe signature validation now working - payment processing and email delivery functional
- **Email Capture Optimization**: Changed from onChange to onBlur - 95% fewer API calls and better data quality
- **Performance Optimization**: Parallel processing for custom traits using Promise.all() vs sequential calls
- **Security Enhancement**: Moved AI generation from client-side to server-side API endpoints

**‚úÖ Major System Components (Jan 2025)**
- **Payment & Generation Pipeline**: Fixed race conditions, hardcoded values, and timeout issues for $149 complete guides
- **Email Systems**: Complete abandoned cart recovery with session linking, webhook integration, and automated processing
- **Dynamic Content**: Homepage URL/description processing, preview generation, and template processing working end-to-end
- **User Experience**: Mobile-first design, loading states, error handling, and payment success flows optimized

---



## üìö Key Lessons Learned

### Technical Architecture
- **Markdown rendering complexity** - `react-markdown` provides safer, more consistent rendering than `marked` + dangerouslySetInnerHTML
- **Plugin ecosystem** - `remark-breaks` solved line break issues more robustly than custom formatting functions
- **Template consistency is critical** - Always use shared components for uniform styling across all generated content
- **Type safety prevents runtime errors** - Add type guards before accessing AI responses

### User Experience  
- **Mobile-first + loading states** - Most users access on mobile, always provide feedback instead of blank screens
- **Payment UX strategy** - Static previews save OpenAI costs, full generation only post-payment
- **Error handling matters** - Generic errors cause user dropoff, need specific helpful messages

### AI Integration
- **OpenAI responses need validation** - Always check format, handle edge cases, use chunked generation
- **Cost optimization matters** - GPT-3.5 for extraction, GPT-4 for generation, 10k character limits
- **Model fallbacks** - Having backup models prevents complete failures
- **Parallel processing wins** - Promise.all() for multiple AI calls reduces latency by 50%+ vs sequential
- **Client-side AI is dangerous** - Always use server-side endpoints to protect API keys and ensure reliability

### Development Process
- **Incremental implementation** - Break complex changes into phases for testing and validation
- **Visual proof testing** - Side-by-side comparisons on test pages catch issues early
- **Data flow validation** - Test through all system layers before marking complete
- **T-shirt sizing works** - SMALL (30 min), MEDIUM (1-2 hours), LARGE (half day+) for realistic estimates
- **Test CLI first, then UI** - Faster feedback loop for API issues, easier debugging
- **Clean as you go** - Move completed tasks immediately to keep scratchpad focused

### Email & Automation Systems
- **Email capture timing** - onBlur vs onChange makes huge difference in data quality and API efficiency
- **Admin vs anon clients** - Use service role keys for automated operations, anon keys for user-facing features
- **Webhook secret management** - Different secrets for CLI vs dashboard vs production - match environment correctly
- **Automation scheduling** - Vercel Pro cron jobs work great for hourly tasks, require proper environment setup
- **Database permissions** - RLS policies block automation - service role bypasses for reliable background jobs

### React State & Race Conditions
- **Race Condition Pattern**: `setState()` is async - don't call functions immediately after that depend on the new state value. React batches state updates for performance, so the new value isn't available instantly
- **Race Condition Fix**: Pass values directly to functions instead of relying on state that may not be updated yet. E.g., `generateStyleGuide(paramValue)` instead of `setState(paramValue); generateStyleGuide()`
- **Debug Pattern**: When UI shows one thing but backend processes another, check for async state issues and parameter passing mismatches between frontend and API
- **React State Timing**: State updates don't happen immediately - they're queued and processed later in the React lifecycle

### Error Handling & Validation
- **Frontend validation > backend validation** - Better UX to block submission early vs show errors after
- **Context-specific error types** - Payment success page only needs 9 of 16 total error types
- **Smart retry > page reload** - 3x faster, preserves state, better analytics
- **Pre-filled support emails** - Include error context and timestamps for better support experience
- **Consistent error UX** - Same patterns across all pages build user confidence

### Project Management
- **1-line summaries > detailed histories** - Keep completed work concise and scannable
- **Break large tasks into small testable pieces** - Each step should have clear completion criteria
- **Visual feedback guides behavior** - Colors, disabled states help users understand what to do next
- **Fix at source > downstream processing** - Remove duplicate content from templates rather than filtering it later

---

## üó∫Ô∏è Future Roadmap

### Short Term (Next 2 weeks)
- **Complete payment flow polish** - Status tracking, better UI, proper redirects
- **Content validation testing** - Ensure all generated content displays correctly
- **Performance monitoring setup** - Add logging for production debugging

### Medium Term (1-2 months)  
- **Editable Style Guides with Plate.js** - Allow users to edit generated content before download
- **Template variety** - Add different style guide formats and structures
- **Export enhancements** - Better PDF styling, additional formats (JSON, Figma)

### Long Term (3+ months)
- **Team collaboration features** - Share guides within organizations
- **API for developers** - Allow programmatic access to style guide generation
- **White-label solution** - Allow agencies to rebrand and resell the tool

### Future Ideas (6+ months)
- Advanced customization options (industry-specific templates, custom voice traits)
- Integration with design tools (Figma, Sketch)
- Multi-language support for international brands
- Team collaboration features (comments, suggestions, approval workflows)
- API for developers to integrate style guide generation into their tools
- Advanced analytics (content performance tracking, style guide usage metrics)
- Version control for style guides (track changes, rollback to previous versions)
- Bulk processing for multiple brands or sub-brands
- Custom branding for agencies (white-label solution)
- Advanced export options (InDesign, PowerPoint, Confluence)

---

## üîß Technical Notes

### Current Architecture
- **Frontend**: Next.js 14, TypeScript, Tailwind CSS, Lucide Icons
- **Backend**: Next.js API routes, OpenAI API, Stripe integration
- **Markdown**: react-markdown + remark-gfm + remark-breaks
- **Storage**: localStorage for client state, sessionStorage for temporary data
- **Styling**: Tailwind Typography, shared MarkdownRenderer, dark mode support

### Key Files & Directories
- `app/page.tsx` - Landing page with URL input
- `app/brand-details/page.tsx` - Brand information form  
- `app/preview/page.tsx` - Style guide preview with paywall
- `app/full-access/page.tsx` - Complete style guide display
- `components/MarkdownRenderer.tsx` - Unified markdown rendering
- `lib/template-processor.ts` - Template loading and processing
- API routes: extract-website, generate-styleguide, preview

### Environment Variables
```
RESEND_API_KEY=re_your_api_key_here
STRIPE_MODE=test (switches between test/live)
NEXT_PUBLIC_APP_URL=http://localhost:3002 (for local testing)
```

---

## üéâ **CHERRY-PICK INTEGRATION SUCCESS** *(January 2025)*

### **‚úÖ COMPLETED: Strategic Feature Integration from feature/copywriter-rebuild**
Successfully implemented targeted merge strategy to add 2 key user experience improvements to main branch while preserving all revenue features.

### **üîß 3-PHASE IMPLEMENTATION COMPLETED:**

**‚úÖ Phase 1: Core Components**
- VoiceTraitSelector with TraitCard for granular brand personality controls
- Enhanced input validation utilities (URL/description detection)  
- Email capture API for abandoned cart retargeting
- lib/traits.ts with predefined brand voice traits

**‚úÖ Phase 2: Homepage URL/Description Dual Input**
- Users can enter website URLs OR brand descriptions
- Enhanced error classification (10+ specific message types)
- Smart input sanitization and validation
- Preserved all Vercel analytics and main branch features

**‚úÖ Phase 3: Advanced Brand Details Form**
- VoiceTraitSelector requiring exactly 3 personality traits
- English variant selection (American vs British spelling)
- Formality level (Professional/Neutral/Casual)
- Reading level targeting (Grade 6-8, 10-12, 13+)
- Progressive email capture when core form complete
- All enhanced fields flow to style guide generation

### **üöÄ USER EXPERIENCE DELIVERED:**
- **Dual input options**: Website URLs or brand descriptions
- **Granular voice control**: 3 required personality traits + language customization
- **Marketing integration**: Email capture for abandoned cart recovery
- **Enhanced validation**: Clear requirements with better UX feedback
- **Complete data flow**: All controls influence style guide output

### **üí™ STRATEGIC SUCCESS:**
- **Zero risk merge**: Preserved all main's revenue features (analytics, coupons, payments)
- **Targeted extraction**: Enhanced only 2 core user flows vs full branch merge
- **Incremental testing**: Each phase independently functional and testable
- **Clean integration**: 3 atomic commits, no architectural conflicts

**Branch:** `feature/homepage-brand-improvements`
**Files Modified:** 6 files, 1400+ lines added
**Status:** Ready for Phase 4 testing and production merge

---

*Last updated: January 2025*
*Status: Active Development - Integration Complete*