---
description: 
globs: 
alwaysApply: false
---
# ===== Cursor Project Rules =====

## Stack
- Frontend: Next.js
- Backend: Next.js API Routes
- Styling: Tailwind CSS
- Hosting: Vercel

## Standards
- TypeScript required
- ESLint + Prettier
- Clean, modular code (DRY, KISS)
- Folder structure: /components, /lib, /api, /app

---

# ===== Frontend Guidelines =====

- Use Next.js with reusable components
- Styling: Tailwind CSS, 4px spacing grid
- Colors: Brand colors from website analysis
- Font: System fonts with Tailwind Typography
- Design for mobile → desktop
- Provide loading, error, and confirmation states

---

# ===== Backend Structure =====

- Use Next.js API Routes
- DB: Session storage for preview, Stripe for payments
- Auth via Stripe Checkout
- API routes: /api/preview, /api/generate, /api/payment
- Apply rate limiting and basic error handling

---

# ===== App Flow =====

- User roles: Free user, Paid user
- Core flow: URL input → brand analysis → preview → payment → full access
- Main pages: /, /preview, /payment
- Nav: Simple header with logo and payment status

---

# ===== Tech Stack =====

- Frontend: Next.js, Tailwind CSS
- Backend: Next.js API Routes, Stripe
- Dev: ESLint, Prettier, GitHub, Vercel

---

# ===== DB + API =====

- Schema:
  - BrandData: colors, fonts, logos, audience
  - StyleGuide: content, format, access level
- One-to-one relationships
- Session storage for preview data

---

# ===== Implementation Plan =====

1. Complete preview routing and flow
2. Install styled-components for better UI
3. Test preview flow end-to-end
4. Add validation and error states
5. Deploy to Vercel
